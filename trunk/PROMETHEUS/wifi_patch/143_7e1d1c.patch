--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/ap/ap_apcli.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/ap/ap_apcli.c
@@ -2721,7 +2721,7 @@
 		}
 	}
 	pRxInfo->MyBss = 1;
-
+	rx_get_pn(pRxBlk,pRxInfo);
 #ifdef HDR_TRANS_SUPPORT
 	if (pRxBlk->bHdrRxTrans)
 		Indicate_Legacy_Packet_Hdr_Trns(pAd, pRxBlk, FromWhichBSSID);
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/ap/ap_data.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/ap/ap_data.c
@@ -4535,6 +4535,94 @@
 }
 
 
+void rx_get_pn(RX_BLK *pRxBlk,RXINFO_STRUC *pRxInfo)
+{
+
+	UINT32 pn_len_byte;
+	UINT64 pnv = 0,pnvh = 0,pnvl = 0;
+	UINT8 *pnb;
+	
+	if (!pRxInfo->pn_len) {
+		DBGPRINT(RT_DEBUG_WARN, ("pn_len is 0.\n"));
+		return; 
+	}
+	pn_len_byte = pRxInfo->pn_len << 2;
+	if (pRxBlk->DataSize <= pn_len_byte) {
+		DBGPRINT(RT_DEBUG_ERROR, ("DataSize %u <= pn_len %u\n", pRxBlk->DataSize, pn_len_byte));
+		return;
+	}
+	pnb = pRxBlk->pData;
+	pRxBlk->pData += pn_len_byte;
+	pRxBlk->DataSize -= pn_len_byte;
+	if (unlikely(pn_len_byte != 8)) {
+		DBGPRINT(RT_DEBUG_OFF, ("abnormal pn_len %u\n", pRxInfo->pn_len));
+		return;
+	}
+	pnvh = ((pnb[7] << 24) | (pnb[6] << 16) | (pnb[5] << 8)| pnb[4]); 	
+	pnvl = ((pnb[1] << 8) | pnb[0]); 
+	pnv = ((pnvh << 16) | pnvl);
+	pRxBlk->CCMP_PN = pnv;
+}
+
+/* this function ONLY if not allow pn replay attack and drop packet */
+BOOLEAN check_rx_pkt_pn_allowed(RTMP_ADAPTER *pAd, RX_BLK *rx_blk) 
+{
+	MAC_TABLE_ENTRY *pEntry = NULL;
+	BOOLEAN isAllow = TRUE;
+	FRAME_CONTROL *pFmeCtrl = (FRAME_CONTROL *)(&(rx_blk->pHeader->FC));
+	NDIS_802_11_WEP_STATUS groupcipher;
+
+	if (pFmeCtrl->Wep == 0) {
+		DBGPRINT(RT_DEBUG_TRACE, ("check_rx_pkt_pn_allowed wep =0\n"));
+		return TRUE;
+	}
+	if (!VALID_WCID(rx_blk->wcid))
+		return TRUE;
+	pEntry = &pAd->MacTab.Content[rx_blk->wcid];
+	if (!pEntry || !pEntry->wdev || !IS_ENTRY_APCLI(pEntry)) {
+		DBGPRINT(RT_DEBUG_WARN, ("check_rx_pkt_pn_allowed pEntry is NULL or not APCLI.\n"));
+		return TRUE;
+	}
+	if (rx_blk->pRxInfo->Mcast || rx_blk->pRxInfo->Bcast) {
+		WPA_GET_GROUP_CIPHER(pAd,pEntry,groupcipher);
+		if (groupcipher == Ndis802_11AESEnable) {			
+			if (pEntry->init_ccmp_bc_pn_passed == FALSE) {
+				if (rx_blk->CCMP_PN < pEntry->CCMP_BC_PN)
+					isAllow = FALSE;
+				else {
+					pEntry->CCMP_BC_PN = rx_blk->CCMP_PN;
+					pEntry->init_ccmp_bc_pn_passed = TRUE;
+				}
+			} else {
+				if (rx_blk->CCMP_PN <= pEntry->CCMP_BC_PN)
+					isAllow = FALSE;
+				else
+					pEntry->CCMP_BC_PN = rx_blk->CCMP_PN;
+			}
+			DBGPRINT(RT_DEBUG_WARN, ("%s:wcid(%d)Seq(%d) %s: come-in the %llu and now is %llu\n",
+			__func__, pEntry->wcid, rx_blk->pHeader->Sequence, ((isAllow == TRUE) ? "OK" : "Reject"),
+			rx_blk->CCMP_PN, pEntry->CCMP_BC_PN));
+		}	
+	} 
+#ifdef PN_UC_REPLAY_DETECTION_SUPPORT	
+	if ((rx_blk->pRxInfo->U2M) &&
+		(pEntry->WepStatus == Ndis802_11AESEnable)) {		
+		UCHAR TID = rx_blk->TID;
+		/*if (pAd->)*/
+		if (rx_blk->CCMP_PN < pEntry->CCMP_UC_PN[TID]) {
+			DBGPRINT(RT_DEBUG_WARN, ("UC, %s (%d) Reject: come-in the %llu and now is %llu\n",
+				__func__, pEntry->wcid, rx_blk->CCMP_PN, pEntry->CCMP_UC_PN[TID]));
+			isAllow = FALSE;
+		} else {
+			pEntry->CCMP_UC_PN[TID] = rx_blk->CCMP_PN;
+		}
+	}
+#endif /* PN_UC_REPLAY_DETECTION_SUPPORT */
+
+	return isAllow;
+}
+
+
 VOID APRxDataFrameAnnounce(
 	IN RTMP_ADAPTER *pAd,
 	IN MAC_TABLE_ENTRY *pEntry,
@@ -5432,6 +5520,9 @@
 	}
 #endif /* SOFT_ENCRYPT */
 
+		/*unicast frame for apcli get pn.*/
+	rx_get_pn(pRxBlk,pRxInfo);
+
 	if (!((pHeader->Frag == 0) && (pFmeCtrl->MoreFrag == 0)))
 	{
 		/*
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/chips/mt76x2.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/chips/mt76x2.c
@@ -1826,7 +1826,9 @@
 	RTMP_IO_READ32(ad, TX_ALC_CFG_4, &value);
 	value &= ~WL_LOWGAIN_CH_EN;
 	RTMP_IO_WRITE32(ad, TX_ALC_CFG_4, value);
-	
+	RTMP_IO_READ32(ad, PN_PAD_MODE, &value);
+	value |= PN_PAD_MODE_OFFSET;
+	RTMP_IO_WRITE32(ad, PN_PAD_MODE, value);
 	/*
  	 * Check crystal trim2 first 
  	 */ 
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/chips/rt6352.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/chips/rt6352.c
@@ -693,6 +693,8 @@
 {
 	UINT32 IdReg;
 	UINT32 Value = 0;
+	UINT32 pn_mode_value = 0;
+
 #ifdef DESC_32B_SUPPORT
 	WPDMA_GLO_CFG_STRUC	GloCfg;
 #endif /* DESC_32B_SUPPORT */
@@ -727,6 +729,14 @@
 	RTMP_IO_READ32(pAd, TX_ALG_CFG_1, &Value);
 	Value = Value & (~0x80000000);
 	RTMP_IO_WRITE32(pAd, TX_ALG_CFG_1, Value);
+
+	/*
+	*bit 0 :  R/W PN_PAD_MODE Padding IV/EIV in RX MPDU when packet is decrypted
+	*0 : Disable                             1: Enable
+	*/
+	RTMP_IO_READ32(pAd, PN_PAD_MODE, &pn_mode_value);
+	pn_mode_value |= PN_PAD_MODE_OFFSET;
+	RTMP_IO_WRITE32(pAd, PN_PAD_MODE, pn_mode_value);
 
 #ifdef DESC_32B_SUPPORT
 	RTMP_IO_READ32(pAd, WPDMA_GLO_CFG , &GloCfg.word);
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/common/cmm_data.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/common/cmm_data.c
@@ -2816,6 +2816,11 @@
 	IN	RX_BLK			*pRxBlk,
 	IN	UCHAR			FromWhichBSSID)
 {
+	if (check_rx_pkt_pn_allowed(pAd, pRxBlk) == FALSE) {
+		DBGPRINT(RT_DEBUG_WARN, ("%s:drop packet by PN mismatch!\n", __func__));
+		RELEASE_NDIS_PACKET(pAd, pRxBlk->pRxPacket, NDIS_STATUS_FAILURE);
+		return;
+	}
 
 	RTMP_UPDATE_OS_PACKET_INFO(pAd, pRxBlk, FromWhichBSSID);
 	RTMP_SET_PACKET_IF(pRxBlk->pRxPacket, FromWhichBSSID);
@@ -3549,6 +3554,12 @@
 	UCHAR Header802_3[LENGTH_802_3];
 	USHORT VLAN_VID = 0, VLAN_Priority = 0;
 
+	if (check_rx_pkt_pn_allowed(pAd, pRxBlk) == FALSE) {
+		DBGPRINT(RT_DEBUG_WARN, ("%s:drop packet by PN mismatch!\n", __func__));
+		RELEASE_NDIS_PACKET(pAd, pRxPacket, NDIS_STATUS_FAILURE);
+		return;
+	}
+
 	/*
 		1. get 802.3 Header
 		2. remove LLC
@@ -4080,7 +4091,11 @@
 		RELEASE_NDIS_PACKET(pAd, pRxBlk->pRxPacket, NDIS_STATUS_FAILURE);
 		return;
 	}
-	
+	if (check_rx_pkt_pn_allowed(pAd, pRxBlk) == FALSE) {
+		DBGPRINT(RT_DEBUG_WARN, ("%s:drop packet by PN mismatch!\n", __func__));
+		RELEASE_NDIS_PACKET(pAd, pRxBlk->pRxPacket, NDIS_STATUS_FAILURE);
+		return;
+	}	
 #ifdef CONFIG_AP_SUPPORT
 	IF_DEV_CONFIG_OPMODE_ON_AP(pAd)
 	{		
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/common/cmm_wpa.c
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/common/cmm_wpa.c
@@ -1228,6 +1228,7 @@
 	GenRandom(pAd, (UCHAR *)pCurrentAddr, pEntry->SNonce);
 	pEntry->AllowInsPTK = TRUE;
 	pEntry->LastGroupKeyId = 0;
+	pEntry->AllowUpdateRSC = FALSE;
 	NdisZeroMemory(pEntry->LastGTK, MAX_LEN_GTK);
 
 #ifdef DOT11R_FT_SUPPORT	
@@ -1784,6 +1785,8 @@
 	USHORT ifIndex = (USHORT)(Elem->Priv);
 	UCHAR CliIdx = 0xFF;
 #endif /* MAC_REPEATER_SUPPORT */
+	UCHAR idx = 0;
+	BOOLEAN bWPA2 = FALSE;
 
 	DBGPRINT(RT_DEBUG_TRACE, ("===> PeerPairMsg3Action \n"));
 	
@@ -1843,6 +1846,18 @@
 	/* Sanity Check peer Pairwise message 3 - Replay Counter, MIC, RSNIE*/
 	if (PeerWpaMessageSanity(pAd, pMsg3, MsgLen, EAPOL_PAIR_MSG_3, pEntry) == FALSE)
 		return;
+	
+	if (group_cipher == Ndis802_11AESEnable)
+		bWPA2 = TRUE;
+	if ((pEntry->AllowInsPTK == TRUE) && bWPA2) {
+		pEntry->CCMP_BC_PN = 0;
+		pEntry->init_ccmp_bc_pn_passed = FALSE;
+		for (idx = 0; idx < LEN_KEY_DESC_RSC; idx++)
+			pEntry->CCMP_BC_PN += (pMsg3->KeyDesc.KeyRsc[idx] << (idx*8));
+		pEntry->AllowUpdateRSC = FALSE;
+		DBGPRINT(RT_DEBUG_OFF, ("%s(%d): update CCMP_BC_PN to %llu\n",
+			__func__, pEntry->wcid, pEntry->CCMP_BC_PN ));		
+	}
 	
 	/* Save Replay counter, it will use construct message 4*/
 	NdisMoveMemory(pEntry->R_Counter, pMsg3->KeyDesc.ReplayCounter, LEN_KEY_DESC_REPLAY);
@@ -1887,6 +1902,7 @@
 			if(pEntry->AllowInsPTK == TRUE) {
 				APCliInstallPairwiseKey(pAd, pEntry);
 				pEntry->AllowInsPTK = FALSE;
+				pEntry->AllowUpdateRSC = TRUE;
 			} else {
 				DBGPRINT(RT_DEBUG_ERROR, ("!!!%s : the M3 reinstall attack, skip install key\n",
 												__func__));
@@ -2399,6 +2415,7 @@
 	UCHAR CliIdx = 0xFF;
 #endif /* MAC_REPEATER_SUPPORT */
 	
+	UCHAR idx = 0;
 	DBGPRINT(RT_DEBUG_TRACE, ("===> PeerGroupMsg1Action \n"));
 
 	if ((!pEntry) || (!IS_ENTRY_CLIENT(pEntry) && !IS_ENTRY_APCLI(pEntry)))
@@ -2453,6 +2470,15 @@
 	/* Sanity Check peer group message 1 - Replay Counter, MIC, RSNIE*/
 	if (PeerWpaMessageSanity(pAd, pGroup, MsgLen, EAPOL_GROUP_MSG_1, pEntry) == FALSE)
 		return;
+	if (pEntry->AllowUpdateRSC == TRUE) {
+		pEntry->CCMP_BC_PN = 0;
+		pEntry->init_ccmp_bc_pn_passed = FALSE;
+		for (idx = 0; idx < LEN_KEY_DESC_RSC; idx++)
+			pEntry->CCMP_BC_PN += (pGroup->KeyDesc.KeyRsc[idx] << (idx*8)); 
+		pEntry->AllowUpdateRSC = FALSE;
+		DBGPRINT(RT_DEBUG_TRACE, ("%s(%d): update CCMP_BC_PN to %llu\n",
+			__func__, pEntry->wcid, pEntry->CCMP_BC_PN ));
+	}
 
 	/* delete retry timer*/
 #ifdef CONFIG_AP_SUPPORT
@@ -4658,6 +4684,7 @@
 				}
 				pEntry->LastGroupKeyId = DefaultIdx;
 				NdisMoveMemory(pEntry->LastGTK, GTK, MAX_LEN_GTK);
+				pEntry->AllowUpdateRSC = TRUE;
 			} else {
 				DBGPRINT(RT_DEBUG_ERROR, ("!!!%s : the Group reinstall attack, skip install key\n",
 					__func__));
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/mac_ral/rtmp_mac.h
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/mac_ral/rtmp_mac.h
@@ -1686,7 +1686,8 @@
 #define TX_SEC_CNT0		0x1500
 #define RX_SEC_CNT0		0x1504
 #define CCMP_FC_MUTE	0x1508
-
+#define PN_PAD_MODE 	0x150C
+#define PN_PAD_MODE_OFFSET 0x1
 
 /*  4.6 HCCA/PSMP (offset:0x1600) */
 #define TXOP_HLDR_ADDR0		0x1600
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/rtmp.h
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/rtmp.h
@@ -3012,9 +3012,6 @@
 	UCHAR R_Counter[LEN_KEY_DESC_REPLAY];
 	UCHAR PTK[64];
 	UCHAR ReTryCounter;
-	BOOLEAN AllowInsPTK;
-	UCHAR LastGroupKeyId;
-	UCHAR LastGTK[MAX_LEN_GTK];	
 	RALINK_TIMER_STRUCT RetryTimer;
 	NDIS_802_11_AUTHENTICATION_MODE AuthMode;	/* This should match to whatever microsoft defined */
 	NDIS_802_11_WEP_STATUS WepStatus;
@@ -3022,6 +3019,9 @@
 	UINT8 WpaState;
 	UINT8 GTKState;
 	USHORT PortSecured;
+	BOOLEAN AllowInsPTK;
+	UCHAR LastGroupKeyId;
+	UCHAR LastGTK[MAX_LEN_GTK];
 	NDIS_802_11_PRIVACY_FILTER PrivacyFilter;	/* PrivacyFilter enum for 802.1X */
 	CIPHER_KEY PairwiseKey;
 	INT PMKID_CacheIdx;
@@ -3410,6 +3410,12 @@
 	struct _sta_hs_info hs_info;
 	UCHAR				IsKeep;
 #endif /* CONFIG_HOTSPOT_R2 */
+#ifdef PN_UC_REPLAY_DETECTION_SUPPORT
+	UINT64 CCMP_UC_PN[NUM_OF_TID];	
+#endif /* PN_UC_REPLAY_DETECTION_SUPPORT */
+	UINT64 CCMP_BC_PN;
+	BOOLEAN AllowUpdateRSC;
+	BOOLEAN init_ccmp_bc_pn_passed;
 } MAC_TABLE_ENTRY, *PMAC_TABLE_ENTRY;
 
 #ifdef DELAYED_TCP_ACK
@@ -5964,7 +5970,7 @@
 #ifdef FORCE_ANNOUNCE_CRITICAL_AMPDU
 	UCHAR CriticalPkt;
 #endif /* FORCE_ANNOUNCE_CRITICAL_AMPDU */
-
+	UINT64 CCMP_PN;
 } RX_BLK;
 
 
@@ -11114,4 +11120,6 @@
 BOOLEAN Monitor_Close(RTMP_ADAPTER *pAd, PNET_DEV dev_p);
 #endif /* CONFIG_SNIFFER_SUPPORT */
 int gen_radiotap_header(RTMP_ADAPTER *pAd,RX_BLK *pRxBlk);
+BOOLEAN check_rx_pkt_pn_allowed(RTMP_ADAPTER *pAd, RX_BLK *rx_blk); 
+void rx_get_pn(RX_BLK *pRxBlk,RXINFO_STRUC *pRxInfo);


 #endif  /* __RTMP_H__ */
--- rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/wpa.h
+++ rt-n56u/trunk/proprietary/rt_wifi/rtpci/3.0.X.X/mt76x2/include/wpa.h
@@ -146,6 +146,7 @@
 #if defined(CONFIG_AP_SUPPORT) && defined(CONFIG_STA_SUPPORT)
 #define WPA_GET_BSS_NUM(_pAd)		(((_pAd)->OpMode == OPMODE_AP) ? (_pAd)->ApCfg.BssidNum : 1)
 #define WPA_GET_GROUP_CIPHER(_pAd, _pEntry, _cipher)					\
+	do																\
 	{																	\
 	_cipher = Ndis802_11WEPDisabled;								\
 		if ((_pAd)->OpMode == OPMODE_AP)								\
@@ -154,35 +155,36 @@
 			((_pEntry)->wdev_idx < MAX_APCLI_NUM))			\
 			_cipher = (_pAd)->ApCfg.ApCliTab[(_pEntry)->wdev_idx].GroupCipher;	\
 			else if ((_pEntry)->apidx < (_pAd)->ApCfg.BssidNum)			\
-				_cipher = (_pAd)->ApCfg.MBSSID[_pEntry->apidx].GroupKeyWepStatus;\
+				_cipher = (_pAd)->ApCfg.MBSSID[_pEntry->apidx].wdev.GroupKeyWepStatus;\
 		}																\
 		else															\
 			_cipher = (_pAd)->StaCfg.GroupCipher;						\
-	}
-
+	}while(0)
 #define WPA_BSSID(_pAd, _apidx) 	(((_pAd)->OpMode == OPMODE_AP) ?\
 									(_pAd)->ApCfg.MBSSID[_apidx].Bssid :\
 									(_pAd)->CommonCfg.Bssid)
 #elif defined(CONFIG_AP_SUPPORT)
 #define WPA_GET_BSS_NUM(_pAd)		(_pAd)->ApCfg.BssidNum
 #define WPA_GET_GROUP_CIPHER(_pAd, _pEntry, _cipher)				\
+	do 															\
 	{																\
 	_cipher = Ndis802_11WEPDisabled;							\
 	if (IS_ENTRY_APCLI(_pEntry) && 								\
 		((_pEntry)->wdev_idx < MAX_APCLI_NUM))			\
 		_cipher = (_pAd)->ApCfg.ApCliTab[(_pEntry)->wdev_idx].GroupCipher;	\
 		else if ((_pEntry)->apidx < (_pAd)->ApCfg.BssidNum)			\
-			_cipher = (_pAd)->ApCfg.MBSSID[_pEntry->apidx].GroupKeyWepStatus;\
-	}
+			_cipher = (_pAd)->ApCfg.MBSSID[_pEntry->apidx].wdev.GroupKeyWepStatus;\
+	}while(0)
 
 #define WPA_BSSID(_pAd, _apidx) 	(_pAd)->ApCfg.MBSSID[_apidx].Bssid
 
 #elif defined(CONFIG_STA_SUPPORT)
 #define WPA_GET_BSS_NUM(_pAd)		1
 #define WPA_GET_GROUP_CIPHER(_pAd, _pEntry, _cipher)				\
+	do															\
 	{																\
 		_cipher = (_pAd)->StaCfg.GroupCipher;						\
-	}
+	}while(0)
 #define WPA_BSSID(_pAd, _apidx) 	(_pAd)->CommonCfg.Bssid
 #endif /* defined(CONFIG_STA_SUPPORT) */
 
